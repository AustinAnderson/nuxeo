package org.nuxeo.common.trycompanion;

import java.util.Collection;
import java.util.Collections;
import java.util.Optional;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;

/**
 * Represents the <i>successful</i> implementation of {@link Try}. <br>
 * Acts as a carrier for the result of a successful computation. <br>
 * For examples on usage refer to the documentation for {@link Try}.
 *
 * @param <T>
 *            The type of the value represented by this instance
 */
public class Success<T> implements Try<T> {

    /**
     * Creates a 'successful' instance with the provided values. <br>
     *
     * @param value
     *            The values represented by this instance
     */
    Success(TryCompanion<T> companion, Collection<T> values) {
        this.companion = companion;
        this.values = Collections.unmodifiableCollection(values);
    }

    final TryCompanion<T> companion;

    final Collection<T> values;

    @Override
    public TryCompanion<T> companion() {
        return companion;
    }

    @Override
    public Collection<T> collection() {
        return values;
    }

    /**
     * Always returns <code>true</code>.
     */
    @Override
    public boolean isSuccess() {
        return true;
    }

    @Override
    public T getOrThrow() throws Exception {
        return values.stream().findFirst().get();
    }

    /**
     * Returns the first value provided in the constructor or else the value returned by the supplier. <br>
     */
    @Override
    public T getOrElse(Supplier<T> supplier) {
        return stream().findFirst().orElse(supplier.get());
    }

    /**
     * Always returns <i>this</i>. <br>
     * I.e. the provided supplier is never use.
     */
    @Override
    public Try<T> orElse(Function<Try<T>, Try<T>> supplier) {
        return this;
    }

    /**
     * Returns the value held by this instance. <br>
     */
    @Override
    public Optional<T> get() {
        return stream().findFirst();
    }

    /**
     * Returns an empty optional {@link Failure}. <br>
     */
    @Override
    public Try<Exception> failed() {
        return TryCompanion.<Exception>of(this).successOf(Collections.emptyList());
    }

    /**
     * Returns this {@link Success} wrapped in the option
     */
    @Override
    public Try<T> succeed() {
        return this;
    }

    /**
     * Applies the value to the function and returns the {@link Try} representing the mapped value.
     */
    @Override
    public <R> Try<R> map(Function<T, R> f) {
        TryCompanion<R> friend = TryCompanion.<R>of(this);
        return stream()
                .map(friend.lazy(f))
                .collect(friend.throwAtEnd());
    }

    /**
     * Applies the value to the function and returns the {@link Try} generated by the function.
     */
    @Override
    public <R> Try<R> flatMap(Function<T, Try<R>> function) {
        TryCompanion<R> friend = TryCompanion.<R>of(this);
        return stream()
                .map(function)
                .reduce(friend::merge)
                .get();
    }

    /**
     * Applies the predicate to the value of this instance, if it matches <i>this</i> is returned else a
     * {@link Failure}.
     */
    @Override
    public Try<T> filter(Predicate<T> predicate) {
        if (!stream().anyMatch(predicate)) {
            return companion.failureOf(new Exception(this + " doesn't match " + predicate));
        }
        return this;
    }

    /**
     * Always returns <i>this</i> . <br>
     * As per definition this is a <i>success</i> and will not need to be recovered.
     */
    @Override
    public Try<T> recover(Function<Exception, T> function) {
        return this;
    }

    /**
     * Always returns <i>this</i> . <br>
     * As per definition this is a <i>success</i> and will not need to be recovered.
     */
    @Override
    public Try<T> recoverWith(Function<Exception, Try<T>> function) {
        return this;
    }

    @Override
    public <X extends Exception> Try<T> orElseThrow(Supplier<X> supplier) throws X {
        return this;
    }

    @Override
    public Try<T> onFailure(Consumer<Try<T>> consumer) {
        return this;
    }

    @Override
    public Try<T> onSuccess(Consumer<Try<T>> consumer) {
        consumer.accept(this);
        return this;
    }

    /**
     * Returns a String representation of the instance.
     */
    @Override
    public String toString() {
        return "Success:" + values;
    }
}